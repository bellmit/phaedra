package eu.openanalytics.phaedra.link.data;

import java.util.ArrayList;
import java.util.List;

import eu.openanalytics.phaedra.base.environment.Screening;
import eu.openanalytics.phaedra.base.util.misc.EclipseLog;
import eu.openanalytics.phaedra.datacapture.DataCaptureService;
import eu.openanalytics.phaedra.datacapture.DataCaptureTask;
import eu.openanalytics.phaedra.datacapture.log.DataCaptureLogItem;
import eu.openanalytics.phaedra.datacapture.log.DataCaptureLogItem.LogItemSeverity;
import eu.openanalytics.phaedra.datacapture.log.IDataCaptureLogListener;
import eu.openanalytics.phaedra.datacapture.model.PlateReading;
import eu.openanalytics.phaedra.datacapture.model.SavedLogEvent;
import eu.openanalytics.phaedra.model.plate.PlateService;
import eu.openanalytics.phaedra.model.plate.vo.Experiment;
import eu.openanalytics.phaedra.model.protocol.ProtocolService;
import eu.openanalytics.phaedra.model.protocol.vo.Protocol;

public class AutoDataLinker implements IDataCaptureLogListener {

	@Override
	public void logEvent(DataCaptureLogItem item) {
		if (item.severity == LogItemSeverity.Completed && item.reading == null) {
			// Only react to the event that is sent when the entire task is Completed.
			doAutoLink(item);
		}
	}

	private boolean doAutoLink(DataCaptureLogItem item) {
		boolean autoLink = getBooleanParam(item.task, DataCaptureTask.PARAM_ALLOW_AUTO_LINK, false);
		if (!autoLink) return false;
		
		// Find all the readings that were generated by this capture task.
		List<PlateReading> readings = new ArrayList<>();
		List<SavedLogEvent> events = DataCaptureService.getInstance().getSavedEvents(item.task.getId());
		events.stream()
			.filter(e -> e.getStatus() == LogItemSeverity.Completed.getLogLevel() && e.getReading() != null)
			.map(e -> e.getReading().substring(e.getReading().lastIndexOf('(')+1, e.getReading().lastIndexOf(')')))
			.map(rId -> DataCaptureService.getInstance().getReading(Long.parseLong(rId)))
			.forEach(r -> readings.add(r));
		
		if (readings.isEmpty()) return false;
		String protocolName = readings.get(0).getProtocol();
		String experimentName = readings.get(0).getExperiment();
		String userName = readings.get(0).getUser();
		
		boolean createNewExp = getBooleanParam(item.task, DataCaptureTask.PARAM_CREATE_NEW_EXP, true);
		
		// Find the target protocol and experiment
		if (protocolName == null || experimentName == null) return false;
		
		List<Protocol> matches = ProtocolService.getInstance().getProtocolsByName(protocolName);
		if (matches.isEmpty()) {
			EclipseLog.warn("Cannot auto-link reading: no protocol found with name '" + protocolName + "'", Activator.getDefault());
			return false;
		}
		if (matches.size() > 1) {
			EclipseLog.warn("Cannot auto-link reading: multiple protocols found with name '" + protocolName + "'", Activator.getDefault());
			return false;
		}
		Protocol protocol = matches.get(0);
		// Refresh to make sure external changes are picked up.
		Screening.getEnvironment().getEntityManager().refresh(protocol);
		Screening.getEnvironment().getEntityManager().refresh(protocol.getProtocolClass());
				
		Experiment experiment = null;
		if (createNewExp) {
			experiment = createNewExperiment(experimentName, protocol, userName);
			if (experiment == null) return false;
		} else {
			List<Experiment> experiments = PlateService.getInstance().getExperiments(protocol);
			for (Experiment exp: experiments) {
				// Refresh to make sure external name changes are picked up.
				Screening.getEnvironment().getEntityManager().refresh(exp);
				if (exp.getName().equals(experimentName)) {
					experiment = exp;
					break;
				}
			}
			if (experiment == null) {
				experiment = createNewExperiment(experimentName, protocol, userName);
				if (experiment == null) return false;
			}
		}
		
		
		// All checks succeeded. Submit a data link task.
		DataLinkTask task = DataLinkService.getInstance().createTask();
		task.selectedReadings.addAll(readings);
		task.targetExperiment = experiment;
		task.createMissingWellFeatures = getBooleanParam(item.task, DataCaptureTask.PARAM_CREATE_MISSING_WELL_FEATURES, false);
		task.createMissingSubWellFeatures = getBooleanParam(item.task, DataCaptureTask.PARAM_CREATE_MISSING_SUBWELL_FEATURES, false);
		DataLinkService.getInstance().queueTask(task);
		return true;
	}
	
	private Experiment createNewExperiment(String name, Protocol parent, String userName) {
		Experiment experiment = PlateService.getInstance().createExperiment(parent);
		experiment.setName(name);
		experiment.setCreator(userName);
		try {
			PlateService.getInstance().updateExperiment(experiment);
		} catch (Throwable t) {
			EclipseLog.error("Cannot auto-link reading: failed to create experiment '" + name + "'", t, Activator.getDefault());
			return null;
		}
		return experiment;
	}
	
	private boolean getBooleanParam(DataCaptureTask task, String paramName, boolean defaultValue) {
		Object value = task.getParameters().get(paramName);
		return (value instanceof Boolean) ? ((Boolean)value).booleanValue() : defaultValue;
	}
}
